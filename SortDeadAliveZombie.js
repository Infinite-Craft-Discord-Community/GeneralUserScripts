// ==UserScript==
// @name        Sorting for Dead Elements4
// @namespace   Violentmonkey Scripts4
// @match       https://neal.fun/infinite-craft/*
// @grant       unsafeWindow
// @version     1.0
// @author      -
// @description 5/11/2024, 7:54:23 PM
// ==/UserScript==
(function(){




  let useDiscoveries=false;
  let complexFilter=null;
  let loadSvg=`data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid" width="200" height="200" style="shape-rendering: auto; display: block; background: rgb(255, 255, 255);" xmlns:xlink="http://www.w3.org/1999/xlink"><g><g transform="rotate(0 50 50)"><rect fill="%239760f4" height="12" width="6" ry="6" rx="3" y="24" x="47"><animate repeatCount="indefinite" begin="-0.9166666666666666s" dur="1s" keyTimes="0;1" values="1;0" attributeName="opacity"></animate></rect></g><g transform="rotate(30 50 50)"><rect fill="%239760f4" height="12" width="6" ry="6" rx="3" y="24" x="47"><animate repeatCount="indefinite" begin="-0.8333333333333334s" dur="1s" keyTimes="0;1" values="1;0" attributeName="opacity"></animate></rect></g><g transform="rotate(60 50 50)"><rect fill="%239760f4" height="12" width="6" ry="6" rx="3" y="24" x="47"><animate repeatCount="indefinite" begin="-0.75s" dur="1s" keyTimes="0;1" values="1;0" attributeName="opacity"></animate></rect></g><g transform="rotate(90 50 50)"><rect fill="%239760f4" height="12" width="6" ry="6" rx="3" y="24" x="47"><animate repeatCount="indefinite" begin="-0.6666666666666666s" dur="1s" keyTimes="0;1" values="1;0" attributeName="opacity"></animate></rect></g><g transform="rotate(120 50 50)"><rect fill="%239760f4" height="12" width="6" ry="6" rx="3" y="24" x="47"><animate repeatCount="indefinite" begin="-0.5833333333333334s" dur="1s" keyTimes="0;1" values="1;0" attributeName="opacity"></animate></rect></g><g transform="rotate(150 50 50)"><rect fill="%239760f4" height="12" width="6" ry="6" rx="3" y="24" x="47"><animate repeatCount="indefinite" begin="-0.5s" dur="1s" keyTimes="0;1" values="1;0" attributeName="opacity"></animate></rect></g><g transform="rotate(180 50 50)"><rect fill="%239760f4" height="12" width="6" ry="6" rx="3" y="24" x="47"><animate repeatCount="indefinite" begin="-0.4166666666666667s" dur="1s" keyTimes="0;1" values="1;0" attributeName="opacity"></animate></rect></g><g transform="rotate(210 50 50)"><rect fill="%239760f4" height="12" width="6" ry="6" rx="3" y="24" x="47"><animate repeatCount="indefinite" begin="-0.3333333333333333s" dur="1s" keyTimes="0;1" values="1;0" attributeName="opacity"></animate></rect></g><g transform="rotate(240 50 50)"><rect fill="%239760f4" height="12" width="6" ry="6" rx="3" y="24" x="47"><animate repeatCount="indefinite" begin="-0.25s" dur="1s" keyTimes="0;1" values="1;0" attributeName="opacity"></animate></rect></g><g transform="rotate(270 50 50)"><rect fill="%239760f4" height="12" width="6" ry="6" rx="3" y="24" x="47"><animate repeatCount="indefinite" begin="-0.16666666666666666s" dur="1s" keyTimes="0;1" values="1;0" attributeName="opacity"></animate></rect></g><g transform="rotate(300 50 50)"><rect fill="%239760f4" height="12" width="6" ry="6" rx="3" y="24" x="47"><animate repeatCount="indefinite" begin="-0.08333333333333333s" dur="1s" keyTimes="0;1" values="1;0" attributeName="opacity"></animate></rect></g><g transform="rotate(330 50 50)"><rect fill="%239760f4" height="12" width="6" ry="6" rx="3" y="24" x="47"><animate repeatCount="indefinite" begin="0s" dur="1s" keyTimes="0;1" values="1;0" attributeName="opacity"></animate></rect></g><g></g></g><!-- [ldio] generated by https://loading.io --></svg>`;
  let loadModal=null;
function isDead(e) {
    if (e.length > 30) return true;
    return !e.split(" ").every(x => x[0]?.toUpperCase() === x[0] && x.slice(1).toLowerCase() === x.slice(1));
}

function isZombie(e) {

  if(localStorage.getItem("zombies"))
    {
      let zombies=JSON.parse(localStorage.getItem("zombies"));
       if(zombies!="" && zombies.length>=1 && zombies.includes(e))
         return true;

    }


     return false;
}


let checked=false;

function makeLoadModal(close=false)
  {     let container=document.querySelector(".container");
     //  console.log("modal making");
     if(loadModal==null)
       {//  console.log("first making");

        //console.log(container);
    let dialog=document.createElement("div");
     dialog.style.width="300px";
     dialog.style.height="300px";
    let img=document.createElement("img");
    img.src=loadSvg;
    img.style.margin="auto";

    let textNode=document.createElement("p");
    textNode.textContent="Wait for sorting";
    textNode.style.margin="auto";
    dialog.appendChild(img);
    dialog.appendChild(document.createElement("br"));

    dialog.appendChild(textNode);
    dialog.style.background=window.getComputedStyle(document.querySelector(".container")).getPropertyValue("--background-color").trim();
    dialog.style.color=window.getComputedStyle(document.querySelector(".container")).getPropertyValue("--text-color").trim();

       dialog.style.position="absolute";
       dialog.style.top="50%";
       dialog.style.left="50%";


    loadModal=dialog;


       }




        if(close==false)
          {      //  console.log("open");
                 container.appendChild(loadModal);

          }else
            {
             //  console.log("closing");
              if(container.contains(loadModal))
               container.removeChild(loadModal);
             //loadModal.close();
            }


  }



















let inBasePart=false;


function basePart(applyMatcher)
{

      if(complexFilter==null)
           complexFilter=  unsafeWindow.$nuxt.$root.$children[2].$children[0].$children[0]._computedWatchers.sortedElements.getter;

                 // console.log("after apply filters",complexFilter());

         unsafeWindow.$nuxt.$root.$children[2].$children[0].$children[0]._computedWatchers.filteredElements.getter=
               exportFunction(() => {

                 let returnedByComplexFilter=complexFilter();
                       renderer(applyMatcher,returnedByComplexFilter);


             return cloneInto(returnedByComplexFilter,unsafeWindow);



         }, unsafeWindow);
  if(checked==false)
  {
    checked=true;
    checkChanges();
    discoveriesListen();
  }


}


function All(elements)
  {
     return elements;
  }






function aliveElements(elements,takeText=function(ch){return ch.text.trim();})
  {


        let children=elements;
     // console.log("children",elements);

        let savedNodes=[];
        //sortButton

       for(let ch of children)
   {
       let nodeText= takeText(ch);
         if(!isDead(nodeText) && !isZombie(nodeText))
           {
             savedNodes.push(ch);

           }


   }
     //console.log(nodeText,nodeText.length);
// console.log("after filtering  alive",savedNodes);
     return savedNodes;
 }
function zombieElements(elements,takeText=function(ch){return ch.text.trim();})
  {


        let children=elements;
     // console.log("children",elements);

        let savedNodes=[];
        //sortButton

       for(let ch of children)
   {
       let nodeText= takeText(ch);
         if(isZombie(nodeText))
           {
             savedNodes.push(ch);

           }


   }
     //console.log(nodeText,nodeText.length);
// console.log("after filtering zombies",savedNodes);
     return savedNodes;
 }
 function deadElements(elements,takeText=function(ch){return ch.text.trim();})
  {
        let children=elements;
        let savedNodes=[];
        //sortButton

       for(let ch of children)
   {

      let nodeText= takeText(ch);
          if(isDead(nodeText))
           {
             savedNodes.push(ch);

           }


   }

     return savedNodes;
  }
let timeout=null;
let timeout2=[];
  function renderer(applyMatcher,returnedByComplexFilter=null)
  {
          if(returnedByComplexFilter==null)
            {
              returnedByComplexFilter=complexFilter();
            }

        let matched=applyMatcher(returnedByComplexFilter);

               if(document.querySelector(".sidebar-discoveries").classList.contains("sidebar-discoveries-active"))
          matched = matched.filter(function(element) {return element.discovered;});


      let searchBar=document.querySelector(".cloneBar");
      searchBar.placeholder="Search ("+matched.length+")...";
      let grandParentDiv=document.getElementsByClassName("items")[0];

      let targetDiv=document.getElementsByClassName("initialItems")[0];
      let secondDiv=document.querySelector(".items-inner + div");
      let sourceDiv=document.querySelector(".items-inner");


      let items= sourceDiv.children;
         targetDiv.textContent="";


            for(let element of matched)
              {

                    let clone=document.createElement("div");
                        clone.classList.add("item");
                        if(element.discovered)
                       clone.classList.add("item-discovered");
                       clone.style.display="inline-block";
                    let span=document.createElement("span");
                      span.classList.add("item-emoji");
                      span.textContent=element.emoji;
                       clone.appendChild(span);
                       clone.appendChild(document.createTextNode(element.text));
                       if(isZombie(element.text))
                          {
                            clone.style.borderColor="#54C571";
                          }

                         clone.classList.add("cloneItem");


              clone.addEventListener("mouseover",(e)=>{ //console.log("mouse over");

                    timeout = setTimeout(()=>{ unsafeWindow.Community.$ui.contextMenus[0].buildContextMenuWhenVisible(clone,e);}, 1000);


                });
            clone.addEventListener("mouseout",(e)=>{ //console.log("mouse over");

                   clearTimeout(timeout);


                });



                        clone.addEventListener("mousedown",(e)=>{



                                         unsafeWindow.$nuxt.$root.$children[2].$children[0].$children[0].selectElement(e,element);
                                         });

                        clone.addEventListener("touchstart",(e)=>{





                                         unsafeWindow.$nuxt.$root.$children[2].$children[0].$children[0].mobileSelectElement(e,element);
                                         });
                     targetDiv.appendChild(clone);


                   }


           targetDiv.style.display="block";
           sourceDiv.style.display="none";
           secondDiv.style.display="none";
           makeLoadModal(true);





  }





  function initialUpdate(applyMatcher)
  {


      let newDiv =document.createElement("div");
       newDiv.classList.add("initialItems");

      let grandParentDiv=document.getElementsByClassName("items")[0];
      if(document.getElementsByClassName("initialItems")[0] &&  grandParentDiv.contains(document.getElementsByClassName("initialItems")[0]))
        {
          grandParentDiv.removeChild(document.getElementsByClassName("initialItems")[0]);

        }

       grandParentDiv.appendChild(newDiv);

       let saveQuery=unsafeWindow.$nuxt.$root.$children[2].$children[0].$children[0]._data.searchQuery;

        renderer(applyMatcher);


  }

function makeElementZombie(element,takeText=function(e){return e.text;})
  { let zombies=[];
    console.log("Make zombie")
    if(localStorage.getItem("zombies"))
      {
        zombies=JSON.parse(localStorage.getItem("zombies"));
      }
   if(!zombies.includes(takeText(element)))
     zombies.push(takeText(element));
   localStorage.setItem("zombies",JSON.stringify(zombies));




  }


  function removeElementZombie(element,takeText=function(e){return e.text;})
  { let zombies=[];
    if(localStorage.getItem("zombies"))
      {
        zombies=JSON.parse(localStorage.getItem("zombies"));

        if(zombies.includes(takeText(element)))
          { // console.log("zombie?",takeText(element));
            let index=zombies.indexOf(takeText(element));
            zombies= [...zombies.slice(0, index), ...zombies.slice(index + 1)];
             // console.log("ZOMBIES?",zombies);

           ;
          }



      }

   localStorage.setItem("zombies",JSON.stringify(zombies));

  }






let matchFunction=All;

function checkChanges()
  {

    let searchBar=document.querySelector(".sidebar-input");
    let cloneBar=searchBar.cloneNode(true);

        searchBar.parentNode.appendChild(cloneBar);
        searchBar.parentNode.removeChild(searchBar);
      cloneBar.classList.add("cloneBar");


        cloneBar.addEventListener("input",(e)=>
                                   {

                                  if (e.inputType === 'insertText' &&
	                                 unsafeWindow.$nuxt.$root.$children[2].$children[0].$children[0]._data.searchQuery.trim().length === 1) {
	                                cloneBar.scrollTo(0, 0); }

                                   unsafeWindow.$nuxt.$root.$children[2].$children[0].$children[0]._data.searchQuery=cloneBar.value;

                               });

  }
         let mode=0;
         let hidden=1;
  function  switchTheStyleDeads()
   {
   //  console.log("switch the style");
     makeLoadModal(false);


       setTimeout(function(){
     //   console.log("mode:",mode);
     switch(mode)
       {
         case 1:
           {
           //   console.log("dead");
            basePart(deadElements);
            matchFunction=deadElements;
            initialUpdate(deadElements);
           };break;
         case 2:
           {

             // console.log("alive");
              basePart(aliveElements);
              matchFunction=aliveElements;
              initialUpdate(aliveElements);

           };
           break;
          case 3:
           {

            //  console.log("zombie");
              basePart(zombieElements);
              matchFunction=zombieElements;
              initialUpdate(zombieElements);

           };
           break;
           default :
           {
              basePart(All);
              matchFunction=All;
              initialUpdate(All);

           }
           ;break;


       }
       // console.log("out of switch");

         },5000);
       // loadModal.close();
   }


         function makeButton()
          {
          let modes=["All","Dead","Alive","Zombie"]


           // console.log("seetings",settings);


             let button=unsafeWindow.Community.$ui.addAndBuildMenuButton(menuText="Sort for dead elements",null,
                                       ()=>{return 0;},options=[{optionText:modes[0],handler:()=>
                                        { mode=0;
                                          switchTheStyleDeads()
                                        }
                                        },
                                        {optionText:modes[1],handler:()=>
                                        {
                                          mode=1;
                                          switchTheStyleDeads()

                                        }},
                                        {optionText:modes[2],handler:()=>
                                        {
                                          mode=2;
                                          switchTheStyleDeads()
                                        }},
                                        {optionText:modes[3],handler:()=>
                                        {
                                           mode=3;
                                        }}])




          }



    function injectCSS() {



    }
   function discoveriesListen()
  {


   let discoveriesButton= document.querySelector(".sidebar-discoveries");
        const discoveriesObserver = new MutationObserver((mutations) => {

            renderer(matchFunction);

        });


        discoveriesObserver.observe(discoveriesButton, {
            childList: false,
            subtree: false,
            attributes:true,

        });



  }

    window.addEventListener('load', async () => {


        console.log("window:",unsafeWindow.Community);
        unsafeWindow.Community.$data.addDataSource(exportFunction);


        console.log("contextMenu",unsafeWindow.Community.$ui.contextMenus[0]);
        unsafeWindow.Community.$ui.contextMenus[0].addAction(
        {
       textOn: "isZombie",
       textOff: "Not Zombie",
       handler: (item,e,check)=>
      {
        if(check)
          makeElementZombie(item,(e)=>{
          return e.childNodes[1].textContent.trim();})
          else
          removeElementZombie(item,(e)=>{
          return e.childNodes[1].textContent.trim();});;
         renderer(matchFunction);
      },
    initHandler: (item)=>{

      return isZombie(item.childNodes[1].textContent.trim());
    },
    type: 1

 }


        )

        console.log("elements",unsafeWindow.Community.$data.getElements());
        console.log("Welcome to hijack sorting");
           injectCSS();
           makeButton();

           console.log(unsafeWindow.$nuxt.$root.$children[2].$children[0].$children[0]);



    }, false);
})();